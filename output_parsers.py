from typing import List, Dict, Any
from langchain.output_parsers import PydanticOutputParser
from langchain_core.pydantic_v1 import BaseModel, Field

class Report(BaseModel):
    report: str = Field(description="The report generated by the agent.")
    score: int = Field(description="The score out of 10 for the report.")

    def to_dict(self) -> Dict[str, Any]:
        return {
            "report": self.report,
            "score": self.score,
        }

report_parser = PydanticOutputParser(pydantic_object=Report)

class GitHubUser(BaseModel):
    username: str = Field(description="The GitHub username")

    def to_dict(self) -> Dict[str, Any]:
        return {
            "username": self.username,
        }
github_user_parser = PydanticOutputParser(pydantic_object=GitHubUser)

class RepositorySummary(BaseModel):
    owner: str = Field(description="The owner of the repository")
    name: str = Field(description="The name of the repository")
    full_name: str = Field(description="The full name of the repository")
    tf_files: List[str] = Field(description="The list of Terraform files in the repository")
    score: int = Field(description="The score out of 10 for the repository")

    def to_dict(self) -> Dict[str, Any]:
        return {
            "owner": self.owner,
            "name": self.name,
            "full_name": self.full_name,
            "tf_files": self.tf_files,
            "score": self.score,
        }

repository_summary_parser = PydanticOutputParser(pydantic_object=RepositorySummary)